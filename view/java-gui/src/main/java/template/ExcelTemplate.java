package template;

import org.apache.commons.io.filefilter.SuffixFileFilter;

import javax.swing.*;
import javax.swing.filechooser.FileSystemView;
import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.*;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import static javax.swing.JFileChooser.DIRECTORIES_ONLY;

/**
 * @author manfred
 */
public class ExcelTemplate extends JFrame {

    private JButton importExcelButton;
    private JLabel jLabelImage;
    private JScrollPane jScrollPane1;

    private JTextArea result;


    /**
     * Creates new form AddDataToJTable
     */
    public ExcelTemplate() {
        super();
        initComponents();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ExcelTemplate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(() -> new ExcelTemplate().setVisible(true));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        result = new JTextArea(100, 100);
        jScrollPane1 = new JScrollPane();
        jLabelImage = new JLabel();
        importExcelButton = new JButton();
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        jScrollPane1.setViewportView(result);
        importExcelButton.setText("Import (Excel)");
        importExcelButton.addActionListener(this::importExcelActionPerformed);
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                                .addComponent(jLabelImage, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(importExcelButton, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabelImage, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(importExcelButton, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(5, 5, 5)))))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 251, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(31, Short.MAX_VALUE))
        );
        pack();
        setLocationRelativeTo(null);
    }

    private void importExcelActionPerformed(java.awt.event.ActionEvent evt) {
        result.setText("");
        File selectDirectory;
        FileSystemView fsv = FileSystemView.getFileSystemView();
        JFileChooser excelFileChooser = new JFileChooser(fsv.getHomeDirectory());
        excelFileChooser.setDialogTitle("请选择文件夹");
        excelFileChooser.setFileSelectionMode(DIRECTORIES_ONLY);
        int excelChooser = excelFileChooser.showOpenDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            selectDirectory = excelFileChooser.getSelectedFile();
            DisposeContext context = extractedContext(selectDirectory);
            if (!context.isExtractSuccess()) {
                return;
            }

            try {
                context.initXSSFWorkbook();
                context.initVendorContext();
                context.saveResult();




                /*
                for (XSSFSheet excelSheet : importExcelWorkBook) {
                    XSSFCell xssfCell = excelSheet.getRow(0).getCell(0);
                    if (null != xssfCell
                            && null != xssfCell.getRawValue()
                            && Cell.CELL_TYPE_STRING == xssfCell.getCellType()
                            && xssfCell.getStringCellValue().contains("CUC")) {
                        int dataBeganRow = 1;
                        for (int row = 1; row < excelSheet.getLastRowNum(); row++) {
                            XSSFRow excelRow = excelSheet.getRow(row);
                            xssfCell = excelRow.getCell(6);
                            if (null != xssfCell
                                    && null != xssfCell.getRawValue()
                                    && Cell.CELL_TYPE_STRING == xssfCell.getCellType()
                                    && xssfCell.getStringCellValue().contains("科目组合")) {
                                dataBeganRow = row + 1;
                                break;
                            }
                        }
                        Map<String, Double> sheetGroupResult = new HashMap<>();
                        for (int row = dataBeganRow; row < excelSheet.getLastRowNum(); row++) {
                            XSSFRow excelRow = excelSheet.getRow(row);
                            String[] strings = excelRow.getCell(6).getStringCellValue().split("\\.");
                            sheetGroupResult.putIfAbsent(strings[3], 0.0);
                            sheetGroupResult.put(strings[3], sheetGroupResult.get(strings[3]) + excelRow.getCell(7).getNumericCellValue());
                        }
                        StringBuilder strResult = new StringBuilder();
                        DecimalFormat format = new DecimalFormat("#0.00");
                        sheetGroupResult.forEach((k, v) -> {
                            strResult.append("\t").append(k).append(": ").append(format.format(v)).append("\n");
                        });
                        result.insert("sheet- <" + excelSheet.getSheetName() + ">\n" + strResult + "\n\n", 0);
                    } else {
                        result.append("sheet- <" + excelSheet.getSheetName() + "> 格式不符合\n");
                    }
                }
                 */


            } catch (IOException ioException) {
                JOptionPane.showMessageDialog(this, ioException.getMessage());
            } finally {
                context.closeXSSFWorkbook();
            }
        }
    }

    private DisposeContext extractedContext(File selectDirectory) {
        DisposeContext context = new DisposeContext();
        context.selectDirectory = selectDirectory;
        try {
            File[] excelFiles = selectDirectory.listFiles(
                    (FilenameFilter) new SuffixFileFilter(new String[]{"xls", "xlsx", "xlsm"}));
            assert excelFiles != null;
            context.exportFinishedClaimListFile = extractFileByName(excelFiles, "ExportFinishedClaimList");
            context.accountPayableFile = extractFileByName(excelFiles, "CUC_应付帐款和其他应付帐款报表");
            context.currentCheckFile = extractFileByName(excelFiles, "CUC_供应商往来情况核对表");
            context.invoiceFile = extractFileByName(excelFiles, "华盛报账单对应发票信息");


            URL templateIs = getClass().getClassLoader().getResource("模板.xlsx");
            assert templateIs != null;
            context.templateFile = new File(templateIs.toURI());

            context.extractSuccess = true;
        } catch (IOException | URISyntaxException ioException) {
            JOptionPane.showMessageDialog(null, ioException.getMessage());
        }
        return context;
    }

    private File extractFileByName(File[] excelFiles, String prefixFileName) throws IOException {
        List<File> exportFinishedClaimListFiles = Arrays.stream(excelFiles).filter(
                a -> a.getName().startsWith(prefixFileName)).collect(Collectors.toList());
        if (exportFinishedClaimListFiles.size() == 0) {
            throw new IOException(prefixFileName + " 开头的 Excel 文件不存在！");
        }
        if (exportFinishedClaimListFiles.size() > 1) {
            throw new IOException(prefixFileName + " 开头的 Excel 文件太多了！不知道选哪一个！");
        }
        return exportFinishedClaimListFiles.get(0);
    }

}